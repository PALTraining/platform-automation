---
resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: terraform
  type: docker-image
  source:
    repository: ronakbanka/terraform-alpine

- name: configuration
  type: git
  source:
    uri: git@github.com:ronakbanka/platform-automation.git
    branch: master
    private_key: ((git-private-key.private_key))

- name: terraforming-aws
  type: git
  source:
    uri: https://github.com/ronakbanka/terraforming-aws
    branch: output-reserved-ips

- name: pcf-automation-image
  type: s3
  source:
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    region_name: ((region))
    bucket: ((bucket))
    regexp: platform-automation-image-(.*).tgz

- name: pcf-automation-tasks
  type: s3
  source:
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    region_name: ((region))
    bucket: ((bucket))
    regexp: platform-automation-tasks-(.*).zip

- name: terraform-state
  type: s3
  source:
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    region_name: ((region))
    bucket: ((terraform_state_bucket))
    versioned_file: terraform.tfstate

- name: pivnet-product
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    product_version: ((opsman_version))
    sort_by: semver

jobs:
- name: bootstrap-terraform-state
  serial_groups: [terraform]
  plan:
  - aggregate:
    - get: configuration
    - get: terraform
  - task: create-terraform-state
    image: terraform
    params:
      S3_ENDPOINT: ((s3_endpoint))
      S3_BUCKET_TERRAFORM: ((terraform_state_bucket))
      S3_REGION: ((region))
      AWS_ACCESS_KEY_ID: ((aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
    file: configuration/tasks/create-initial-terraform-state.yml

- name: create-infrastructure
  serial_groups: [terraform]
  plan:
  - aggregate:
    - get: configuration
    - get: terraforming-aws
    - get: terraform
      passed: [bootstrap-terraform-state]
    - get: terraform-state
  - task: terraforming-aws
    image: terraform
    file: configuration/tasks/terraforming-aws.yml
    input_mapping:
      config: configuration
      state: terraform-state
      terraforming: terraforming-aws
    params:
      ENV_NAME: ((prefix))
      AWS_ACCESS_KEY_ID: ((aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
      AWS_REGION: ((region))
      AWS_AZS: ((azs))
      OPS_MANAGER_VM: false
      PCF_DNS_DOMAIN: ((pcf_domain))
    ensure:
      put: terraform-state
      params:
        file: generated-state/terraform.tfstate

- name: set-credentials-credhub
  serial_groups: [terraform]
  plan:
  - aggregate:
    - get: configuration
    - get: terraform
    - get: terraform-state
      passed: [create-infrastructure]
      trigger: true
  - task: credhub-set-creds
    image: terraform
    file: configuration/tasks/credhub-set-creds.yml
    input_mapping:
      state: terraform-state
    params:
      CREDHUB_CA_CERT: ((credhub_ca_cert.ca))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/main
      ENV_NAME: ((prefix))
      AWS_ACCESS_KEY_ID: ((aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))

- name: install-ops-manager
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pivnet-product
      params:
        globs:
        - '*AWS.yml'
    - get: configuration
      passed: [set-credentials-credhub]
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: configuration
    output_mapping:
      interpolated-files: config
    params:
      CREDHUB_CA_CERT: ((credhub_ca_cert.ca))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/main
      INTERPOLATION_PATH: ((foundation))
  - task: deploy-opsmanager-vm
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/create-vm.yml
    input_mapping:
      state: config
      image: pivnet-product
      config: config
    params:
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
      STATE_FILE: ((foundation))/state/state.yml
    ensure: &make-state-commit
      do:
        - task: make-commit
          image: pcf-automation-image
          file: pcf-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-state
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((foundation))/state/state.yml
            GIT_AUTHOR_EMAIL: "pcf-automation-bot@devstack.in"
            GIT_AUTHOR_NAME: "PCF Automation Bot"
            COMMIT_MESSAGE: 'Update state file'
        - put: configuration
          params:
            repository: configuration-commit
            merge: true
- name: configure-ops-manager
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pivnet-product
      passed: [install-ops-manager]
      trigger: true
      params:
        globs:
        - '*AWS.yml'
    - get: configuration
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/credhub-interpolate.yml
    input_mapping:
      files: configuration
    params:
      CREDHUB_CA_CERT: ((credhub_ca_cert.ca))
      CREDHUB_CLIENT: ((credhub_client))
      CREDHUB_SECRET: ((credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /concourse/main
      INTERPOLATION_PATH: ((foundation))
  - task: configure-authentication
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: interpolated-files
      config: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml
      AUTH_CONFIG_FILE: ((foundation))/config/auth.yml
  - task: configure-director
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: interpolated-files
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml
      DIRECTOR_CONFIG_FILE: ((foundation))/products/director.yml
  - task: apply-director-changes
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml
